settings
{
	modes
	{
		disabled Practice Range
		{
			Training Partner: Off
		}

		Skirmish
		{
			enabled maps
			{
				Workshop Chamber
			}
		}

		General
		{
			Game Mode Start: Manual
			Limit Roles: 2 Of Each Role Per Team
		}
	}
}

variables
{
	global:
		0: loop_i

	player:
		0: accDmg
		1: lastDmgTime
		2: dmgIsCrit
		3: victimPos
		4: accHeal
		5: lastHealTime
		6: healeePos
}

rule("init_damage_iwt")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		For Global Variable(loop_i, 0, 6, 1);
			Create In-World Text(All Players(All Teams), Round To Integer(Local Player.accDmg[Evaluate Once(Global.loop_i)], To Nearest),
				Local Player.victimPos[Evaluate Once(Global.loop_i)] + 0.400 * Up * (
				Total Time Elapsed - Local Player.lastDmgTime[Evaluate Once(Global.loop_i)]), 1.500, Do Not Clip,
				Visible To Position String and Color, Total Time Elapsed - Local Player.lastDmgTime[Evaluate Once(Global.loop_i)
				] > 3 ? Custom Color(255, 255, 255, 0) : (Local Player.dmgIsCrit[Evaluate Once(Global.loop_i)] ? Color(Red) : Color(Green)),
				Default Visibility);
		End;
	}
}

rule("init_healing_iwt")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		For Global Variable(loop_i, 0, 6, 1);
			Create In-World Text(All Players(All Teams), Round To Integer(Local Player.accHeal[Evaluate Once(Global.loop_i)], To Nearest),
				Local Player.healeePos[Evaluate Once(Global.loop_i)] + 0.400 * Up * (
				Total Time Elapsed - Local Player.lastHealTime[Evaluate Once(Global.loop_i)]), 1.500, Do Not Clip,
				Visible To Position String and Color, Total Time Elapsed - Local Player.lastHealTime[Evaluate Once(Global.loop_i)
				] > 3 ? Custom Color(255, 255, 255, 0) : Color(Aqua), Default Visibility);
		End;
	}
}

rule("dealt_dmg")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	actions
	{
		If(Total Time Elapsed - Event Player.lastDmgTime[Slot Of(Victim)] > 0.800);
			Event Player.accDmg[Slot Of(Victim)] = 0;
		End;
		Event Player.accDmg[Slot Of(Victim)] += Event Damage;
		Event Player.victimPos[Slot Of(Victim)] = Eye Position(Victim);
		Event Player.lastDmgTime[Slot Of(Victim)] = Total Time Elapsed;
		If(Event Was Critical Hit);
			Event Player.dmgIsCrit[Slot Of(Victim)] = True;
		Else;
			Event Player.dmgIsCrit[Slot Of(Victim)] = False;
		End;
	}
}

rule("dealt_heal")
{
	event
	{
		Player Dealt Healing;
		All;
		All;
	}

	actions
	{
		If(Total Time Elapsed - Event Player.lastHealTime[Slot Of(Healee)] > 1.200);
			Event Player.accHeal[Slot Of(Healee)] = 0;
		End;
		Event Player.accHeal[Slot Of(Healee)] += Event Healing;
		Event Player.healeePos[Slot Of(Healee)] = Eye Position(Healee);
		Event Player.lastHealTime[Slot Of(Healee)] = Total Time Elapsed;
	}
}