variables
{
	global:
		0: slotC
		1: slotQ
		2: slotS

	player:
		0: accDmg
		1: lastDmgTime
		2: dmgIsCrit
		3: victimPos
		4: accHeal
		5: lastHealTime
		6: healeePos
}

rule("init")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		Global.slotQ = Empty Array;
		Global.slotS = Empty Array;
		While(True);
			Wait Until(Global.slotQ != Empty Array, 99999);
			Global.slotC = First Of(Global.slotQ);
			Modify Global Variable(slotQ, Remove From Array By Value, Global.slotC);
			If(!Array Contains(Global.slotS, Global.slotC));
				Modify Global Variable(slotS, Append To Array, Global.slotC);
				Create In-World Text(All Players(All Teams), Round To Integer(Local Player.accDmg[Evaluate Once(Global.slotC)], To Nearest), Local Player.victimPos[Evaluate Once(Global.slotC)] + 0.400 * Up * (Total Time Elapsed - Local Player.lastDmgTime[Evaluate Once(Global.slotC)]), 1.500, Do Not Clip, Visible To Position String and Color, Total Time Elapsed - Local Player.lastDmgTime[Evaluate Once(Global.slotC)] > 1.500 ? Custom Color(255, 255, 255, 0) : (Local Player.dmgIsCrit[Evaluate Once(Global.slotC)] ? Color(Red) : Color(Green)), Default Visibility);
				Create In-World Text(All Players(All Teams), Round To Integer(Local Player.accDmg[Evaluate Once(Global.slotC)], To Nearest), Local Player.victimPos[Evaluate Once(Global.slotC)] + 0.400 * Up * (Total Time Elapsed - Local Player.lastDmgTime[Evaluate Once(Global.slotC)]), 1.500, Do Not Clip, Visible To Position String and Color, Total Time Elapsed - Local Player.lastDmgTime[Evaluate Once(Global.slotC)] > 1.500 ? Custom Color(255, 255, 255, 0) : (Local Player.dmgIsCrit[Evaluate Once(Global.slotC)] ? Color(Red) : Color(Green)), Default Visibility);
			End;
		End;
	}
}

rule("dealt_dmg")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
		Victim != Attacker;
		Is In Line of Sight(Attacker, Victim, Barriers Do Not Block LOS) == True;
	}

	actions
	{
		If(Total Time Elapsed - Event Player.lastDmgTime[Slot Of(Victim)] > 1.500);
			Event Player.accDmg[Slot Of(Victim)] = Event Damage;
		Else;
			Event Player.accDmg[Slot Of(Victim)] += Event Damage;
		End;
		Event Player.victimPos[Slot Of(Victim)] = Eye Position(Victim);
		Event Player.lastDmgTime[Slot Of(Victim)] = Total Time Elapsed;
		If(Event Was Critical Hit);
			Event Player.dmgIsCrit[Slot Of(Victim)] = True;
		Else;
			Event Player.dmgIsCrit[Slot Of(Victim)] = False;
		End;
	}
}

rule("dealt_heal")
{
	event
	{
		Player Dealt Healing;
		All;
		All;
	}

	conditions
	{
		Healer != Healee;
		Event Healing > 0;
		Is Dummy Bot(Event Player) != True;
	}

	actions
	{
		If(Total Time Elapsed - Event Player.lastHealTime[Slot Of(Healee)] > 1.500);
			Event Player.accHeal[Slot Of(Healee)] = Event Healing;
		Else;
			Event Player.accHeal[Slot Of(Healee)] += Event Healing;
		End;
		Event Player.healeePos[Slot Of(Healee)] = Eye Position(Healee);
		Event Player.lastHealTime[Slot Of(Healee)] = Total Time Elapsed;
	}
}

rule("player_init")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Modify Global Variable(slotQ, Append To Array, Slot Of(Event Player));
	}
}