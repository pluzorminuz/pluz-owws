settings
{
	lobby
	{
		Max Team 1 Players: 1
		Max Team 2 Players: 1
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				King's Row
			}
		}
	}

	extensions
	{
		Beam Effects
		Play More Effects
	}
}

variables
{
	global:
		0: v
		1: e
		2: loop_i
		3: count

	player:
		0: loop_i
		1: v
}

rule("init")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		disabled Global.v = Array(Vector(20, 0, 20), Vector(-20, 0, 20), Vector(-20, 0, -20), Vector(20, 0, -20));
		disabled Global.e = Array(0, 1, 1, 2, 2, 3, 3, 0);
		Global.v = Array(Vector(-106.660, -2.950, -69.550), Vector(-100.960, -2.820, -65.190), Vector(-103.840, -2.500, -61.190), Vector(-97.210, -2.130, -57.070), Vector(-100.340, -2.110, -50.840), Vector(-98.180, -1.060, -49.840), Vector(-97.610, -1.060, -49.670), Vector(-95.780, -1.050, -50.810), Vector(-92.670, 0.110, -58.180), Vector(-90.260, 0.120, -60.830), Vector(-86.090, 0.100, -61.070), Vector(-66.810, 2.100, -52.680), Vector(-68.500, 2.120, -48.820), Vector(-87.310, 0.120, -57.030), Vector(-88.230, 0.110, -57.160), Vector(-88.820, 0.120, -56.470), Vector(-92.120, -0.920, -49.220), Vector(-88.350, -1.010, -47.780), Vector(-91.530, -1.030, -40.500), Vector(-95.160, -1.050, -42.230), Vector(-98.510, 1.080, -34.560), Vector(-97.920, 1.120, -33.390), Vector(-91.590, 3.110, -30.770), Vector(-93.250, 3.100, -26.890), Vector(-99.330, 1.230, -29.670), Vector(-102.080, 1.190, -32.080), Vector(-102.100, 1.140, -36.280), Vector(-98.810, -0.900, -43.820), Vector(-100.720, -1.020, -44.460), Vector(-99.730, -1.050, -46.250), Vector(-101.930, -1.890, -47.180), Vector(-102.030, -2.110, -46.670), Vector(-103.340, -2.130, -42.770), Vector(-104.430, -2.110, -38.280), Vector(-105.480, -2.130, -34.720), Vector(-113.210, -2.290, -35.910), Vector(-113.440, -2.840, -33.120), Vector(-120.590, -2.880, -33.690), Vector(-120.200, -2.860, -37.020), Vector(-117.510, -2.960, -50.370), Vector(-111.980, -3.140, -62.420), Vector(-86.360, 0.870, -31.330), Vector(-81.620, 4.740, -44.380), Vector(-69.240, 4.610, -39.770), Vector(-69.610, 4.510, -37.660), Vector(-65.960, 4.630, -36.130), Vector(-67.230, 4.780, -32.830), Vector(-81.290, 4.500, -37.820), Vector(-84.270, 0.830, -29.270), Vector(-70.460, -0.050, -24.160), Vector(-65.610, -0.090, -36.300), Vector(-56.910, -0.140, -39.070), Vector(-56.880, -0.140, -41.290), Vector(-59.990, 0.240, -45.050), Vector(-63.180, 0.350, -46.260), Vector(-69.540, 0.340, -39.980), Vector(-65.980, 1.760, -53.300), Vector(-60.100, 0.380, -50.400), Vector(-53.440, 0.120, -47.270), Vector(-52.720, 0.160, -44.270), Vector(-50.050, 0.090, -44.520), Vector(-49.870, 2.280, -51.930), Vector(-42.840, 2.150, -52.360), Vector(-42.800, 2.180, -53.280), Vector(-33.190, 2.170, -51.930), Vector(-39.430, 2.040, -47.870), Vector(-43.010, 2.150, -48.030), Vector(-46.630, 2.030, -48.860), Vector(-46.950, 0.160, -41.340), Vector(-53.500, 0.070, -41.410), Vector(-53.230, 0.150, -39.350), Vector(-46.360, 0.070, -38.620), Vector(-40.270, 0.130, -39), Vector(-67.850, 0.380, -48.630), Vector(-74.120, 0.440, -45.730), Vector(-83.980, 0.550, -49.170), Vector(-90.810, 0.800, -37.640), Vector(-94.310, 0.790, -39.440), Vector(-95.730, 0.860, -36.150), Vector(-89.730, 0.880, -33.600), Vector(-93.910, 1.150, -23.530), Vector(-99.960, 1.080, -26.150), Vector(-99.760, 1.330, -23.970), Vector(-101.410, 0.640, -13.400), Vector(-100.480, 0.700, -3.400), Vector(-117.890, -1.360, -0.080), Vector(-115.220, -1.370, 17.540), Vector(-116.030, -1.370, 20.900), Vector(-120.290, -1.370, 24.490), Vector(-140.860, -3.210, 28.080), Vector(-142.200, -3.200, 30.990), Vector(-145.620, -3.200, 33.180), Vector(-153.840, -3.080, 34.570), Vector(-156.810, -3.020, 17.310), Vector(-149.900, -3.200, 14.830), Vector(-145.570, -3.200, 15.200), Vector(-142.680, -3.210, 17.930), Vector(-126.220, -1.360, 14.890), Vector(-128.860, -1.020, -2.790), Vector(-127.620, -1.340, -6.810), Vector(-122.940, -1.350, -9.810), Vector(-102.120, 0.680, -13.260));
		Global.e = Array(0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 0, 41, 42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 50, 50, 51, 51, 52, 52, 53, 53, 54, 54, 55, 56, 57, 57, 58, 58, 59, 59, 60, 60, 61, 61, 62, 62, 63, 63, 64, 65, 66, 66, 67, 67, 68, 68, 69, 69, 70, 70, 71, 71, 72, 72, 65, 73, 74, 74, 75, 75, 76, 76, 77, 77, 78, 78, 79, 79, 80, 80, 81, 81, 82, 82, 83, 84, 85, 85, 86, 86, 87, 87, 88, 88, 89, 89, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 100, 100, 101, 101, 84);
		Global.count = Count Of(Global.v);
		Call Subroutine(Sub0);
	}
}

rule("beams")
{
	event
	{
		Subroutine;
		Sub0;
	}

	actions
	{
		Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Vector(0, 0, 1.200), Local Player, Rotation And Translation), Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Vector(0, 0, 1.200), Local Player, Rotation And Translation), Team Of(Local Player), Visible To Position Radius and Color);
		For Global Variable(loop_i, 0, Count Of(Global.e), 2);
			Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Local Player.v[Evaluate Once(Global.e[Global.loop_i])], Local Player, Rotation And Translation), Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Local Player.v[Evaluate Once(Global.e[Global.loop_i + 1])], Local Player, Rotation And Translation), Team Of(Local Player), Visible To Position Radius and Color);
		End;
	}
}

rule("calc_local_vector")
{
	event
	{
		Subroutine;
		Sub1;
	}

	actions
	{
		For Player Variable(Event Player, loop_i, 0, Count Of(Global.v), 1);
			Event Player.v[Event Player.loop_i] = 0.050 * Local Vector Of(Global.v[Event Player.loop_i], Event Player, Rotation And Translation);
			Event Player.v[Event Player.loop_i] = Vector(X Component Of(Event Player.v[Event Player.loop_i]), Z Component Of(Event Player.v[Event Player.loop_i]), 2);
		End;
	}
}

rule("player_init")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Call Subroutine(Sub1);
		Wait(0.032, Ignore Condition);
		Loop;
	}
}

rule("Rule 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Enable Inspector Recording;
		Log To Inspector(Custom String("Vector{0}{1}", Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 100 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, False), Global.count));
		Disable Inspector Recording;
		Global.count += 1;
	}
}