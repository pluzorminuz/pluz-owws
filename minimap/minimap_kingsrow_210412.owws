settings
{
	main
	{
		Description: "minimap kings row custom circ v2"
	}

	lobby
	{
		Max Team 1 Players: 1
		Max Team 2 Players: 1
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				King's Row
			}
		}
	}

	extensions
	{
		Beam Effects
		Play More Effects
	}
}

variables
{
	global:
		0: v
		1: e
		2: loop_i
		3: count
		4: e_c
		5: c
		6: maxbeams
		7: sector_v
		9: temp_arr
		10: loop_j
		11: temp_arr_v
		12: temp_index

	player:
		0: loop_i
		1: v
		2: cur_sector
		3: v_pre
		4: nearest_sector
		5: temp_arr
		6: p1d
		7: p2d
		8: lb_arr
		9: x1
		10: x2
		11: y1
		12: y2
		13: p1
		14: p2
		15: p3
		16: p4
		17: q1
		18: q2
		19: q3
		20: q4
		21: posarr
		22: negarr
		23: loop_lb
		24: clip_circ
}

subroutines
{
	0: init_beams
	1: calc_local
	2: calc_e_c
	3: init_v_e_data
	4: calc_sectors
	5: clipper_circ
	6: clipper_liangbarsky
	7: clipper_liangbarsky2
	8: clipper_circ2
}

rule("init")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		Global.maxbeams = 64;
		Global.c = Array(Vector(-107.170, 0, -48.357), Vector(1.232, 0, 55.874), Vector(-36.389, 0, -18.385), Vector(-21.279, 0, 3.152), Vector(-115.011, 0, -3.792), Vector(-171.350, 0, 36.005), Vector(10.401, 0, -48.863), Vector(-134.401, 0, 21.564), Vector(-89.036, 0, -29.089), Vector(-68.068, 0, -1.887), Vector(-56.450, 0, -44.390), Vector(-27.038, 0, -48.704), Vector(-5.183, 0, -24.211), Vector(4.633, 0, -1.363), Vector(-2.451, 0, 25.272));
		Call Subroutine(init_v_e_data);
		Global.count = Count Of(Global.v);
		Wait(0.016, Ignore Condition);
		Call Subroutine(calc_e_c);
		Wait(0.048, Ignore Condition);
		Call Subroutine(calc_sectors);
		Wait(0.048, Ignore Condition);
		Call Subroutine(init_beams);
		Create HUD Text(All Players(All Teams), Custom String("{0} {1} {2}", Server Load, Server Load Average, Custom String("{0} {1} {2}", Server Load Peak, Entity Count, Text Count)), Null, Null, Right, 0, Color(Gray), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Local Player.nearest_sector, Null, Null, Left, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		disabled Enable Inspector Recording;
	}
}

rule("create_e_c")
{
	event
	{
		Subroutine;
		calc_e_c;
	}

	actions
	{
		Global.e_c = Empty Array;
		For Global Variable(loop_i, 0, Count Of(Global.e), 2);
			Modify Global Variable(e_c, Append To Array, 0.500 * (Global.v[Global.e[Global.loop_i]] + Global.v[Global.e[Global.loop_i + 1]]));
		End;
	}
}

rule("beams")
{
	event
	{
		Subroutine;
		init_beams;
	}

	actions
	{
		Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Vector(0, 0, 1.200), Local Player, Rotation And Translation), Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Vector(0, 0, 1.200), Local Player, Rotation And Translation), Team Of(Local Player), Visible To Position Radius and Color);
		For Global Variable(loop_i, 0, Global.maxbeams * 2, 2);
			Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Update Every Frame(Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Local Player.v[Evaluate Once(Global.loop_i)] + 2 * Forward, Local Player, Rotation And Translation)), Update Every Frame(Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Local Player.v[Evaluate Once(Global.loop_i + 1)] + 2 * Forward, Local Player, Rotation And Translation)), Team Of(Local Player), Visible To Position Radius and Color);
		End;
		"square"
		disabled Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Vector(1, 1, 2), Local Player, Rotation And Translation), Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Vector(-1, 1, 2), Local Player, Rotation And Translation), Team Of(Local Player), Visible To Position Radius and Color);
		disabled Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Vector(-1, 1, 2), Local Player, Rotation And Translation), Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Vector(-1, -1, 2), Local Player, Rotation And Translation), Team Of(Local Player), Visible To Position Radius and Color);
		disabled Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Vector(-1, -1, 2), Local Player, Rotation And Translation), Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Vector(1, -1, 2), Local Player, Rotation And Translation), Team Of(Local Player), Visible To Position Radius and Color);
		disabled Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Vector(1, -1, 2), Local Player, Rotation And Translation), Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Vector(1, 1, 2), Local Player, Rotation And Translation), Team Of(Local Player), Visible To Position Radius and Color);
		"circular window"
		For Global Variable(loop_i, 0, 16, 1);
			Create Beam Effect(All Players(All Teams), Torbjörn Turret Sight Beam, Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Evaluate Once(Vector(Cosine From Degrees(Global.loop_i * 360 / 16), Sine From Degrees(Global.loop_i * 360 / 16), 2)), Local Player, Rotation And Translation), Eye Position(Local Player) - Position Of(Local Player) + World Vector Of(Evaluate Once(Vector(Cosine From Degrees((Global.loop_i + 1) * 360 / 16), Sine From Degrees((Global.loop_i + 1) * 360 / 16), 2)), Local Player, Rotation And Translation), Team Of(Local Player), Visible To Position Radius and Color);
		End;
	}
}

rule("calc_local_vector")
{
	event
	{
		Subroutine;
		calc_local;
	}

	actions
	{
		Event Player.v = Mapped Array(Event Player.v_pre, X Component Of(0.050 * Local Vector Of(Current Array Element, Event Player, Rotation And Translation)) * Left + Z Component Of(0.050 * Local Vector Of(Current Array Element, Event Player, Rotation And Translation)) * Up);
	}
}

rule("player_first_spawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.cur_sector = 0 * Up;
	}
}

rule("player_load_sectors")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Event Player.temp_arr = Sorted Array(Global.c, Distance Between(Vector(X Component Of(Position Of(Event Player)), 0, Z Component Of(Position Of(Event Player))), Current Array Element));
		Event Player.nearest_sector = Index Of Array Value(Global.c, First Of(Event Player.temp_arr));
		If(Event Player.nearest_sector != Event Player.cur_sector);
			Event Player.cur_sector = Event Player.nearest_sector;
			Event Player.v_pre = Global.sector_v[Event Player.cur_sector];
		End;
		Wait(0.512, Ignore Condition);
		Loop If Condition Is True;
	}
}

rule("player_local_calcloop")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Call Subroutine(calc_local);
		Call Subroutine(clipper_circ2);
		Wait(0.064, Ignore Condition);
		disabled Enable Inspector Recording;
		disabled Disable Inspector Recording;
		Loop If Condition Is True;
	}
}

disabled rule("Rule 5")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		Enable Inspector Recording;
		Log To Inspector(Custom String("Vector{0}{1}", Ray Cast Hit Position(Eye Position(Event Player), Eye Position(Event Player) + 100 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, False), Global.count));
		Disable Inspector Recording;
		Global.count += 1;
	}
}

rule("init_v_e_data")
{
	event
	{
		Subroutine;
		init_v_e_data;
	}

	actions
	{
		disabled Global.v = Array(Vector(20, 0, 20), Vector(-20, 0, 20), Vector(-20, 0, -20), Vector(20, 0, -20));
		disabled Global.e = Array(0, 1, 1, 2, 2, 3, 3, 0);
		Global.v = Array(Vector(-69.830, 0, -37.745), Vector(-69.149, 0, -39.836), Vector(-86.455, 0, -31.341), Vector(-81.660, 0, -44.423), Vector(-65.924, 0, -36.061), Vector(-70.118, 0, -24.089), Vector(-84.356, 0, -29.297), Vector(-81.245, 0, -37.888), Vector(-67.243, 0, -32.612), Vector(-89.499, 0, -33.505), Vector(-95.181, 0, -36.042), Vector(-93.794, 0, -39.931), Vector(-90.209, 0, -37.766), Vector(-85.170, 0, -45.579), Vector(-86.015, 0, -46.086), Vector(-83.885, 0, -49.232), Vector(-74.009, 0, -45.342), Vector(-67.583, 0, -47.947), Vector(-65.588, 0, -52.749), Vector(-93.727, 0, -23.460), Vector(-99.814, 0, -25.828), Vector(-102.590, 0, -22.009), Vector(-99.305, 0, -3.397), Vector(-99.362, 0, -3.453), Vector(-116.377, 0, -0.892), Vector(-113.498, 0, 24.370), Vector(-117.047, 0, 2.551), Vector(-156, 0, 50.423), Vector(-124.850, 0, 44.608), Vector(-126.609, 0, 33.610), Vector(-108.593, 0, 30.368), Vector(-111.085, 0, 14.586), Vector(-114.910, 0, 15.238), Vector(-59.963, 0, -50.409), Vector(-52.982, 0, -47.067), Vector(-53.284, 0, -39.043), Vector(-44.217, 0, -38.582), Vector(-44.252, 0, -39.304), Vector(-40.220, 0, -39.019), Vector(-39.563, 0, -47.922), Vector(-43.112, 0, -47.921), Vector(-42.875, 0, -53.514), Vector(-33.154, 0, -51.989), Vector(-23.324, 0, -14.813), Vector(-39.433, 0, -15.728), Vector(-50.621, 0, -23.911), Vector(-49.505, 0, -27.814), Vector(-57.919, 0, -30.282), Vector(-61.155, 0, -19.628), Vector(-28.515, 0, -8.934), Vector(-74.284, 0, -16.638), Vector(-63.128, 0, -46.254), Vector(-59.260, 0, -43.910), Vector(-57.434, 0, -38.720), Vector(-74.072, 0, -17.899), Vector(-84.652, 0, -19.693), Vector(-87.570, 0, -2.083), Vector(-77.263, 0, -0.179), Vector(-74.969, 0, -12.352), Vector(-57.562, 0, -13.773), Vector(-59.652, 0, -2.522), Vector(-68.499, 0, -4.200), Vector(-69.994, 0, 5.144), Vector(-80.640, 0, 8.701), Vector(-89.515, 0, 8.305), Vector(-95.966, 0, 6.565), Vector(-95.351, 0, 10.584), Vector(-93.898, 0, 13.186), Vector(-89.257, 0, 11.584), Vector(-28.634, 0, -51.235), Vector(-35.429, 0, -12.381), Vector(-24.164, 0, -10.384), Vector(-21.751, 0, -23.997), Vector(-19.446, 0, -25.672), Vector(-15.109, 0, -24.905), Vector(-13.441, 0, -22.612), Vector(-15.875, 0, -8.526), Vector(-21.739, 0, -8.507), Vector(-20.866, 0, -1.361), Vector(-22.606, 0, -19.201), Vector(-28.528, 0, 12.606), Vector(-34.870, 0, 13.781), Vector(-34.238, 0, 23.575), Vector(-22.889, 0, 22.642), Vector(-22.032, 0, 26.985), Vector(-14.844, 0, 25.458), Vector(-16.371, 0, 19.840), Vector(8.099, 0, 14.985), Vector(9.286, 0, 20.752), Vector(20.645, 0, 18.583), Vector(-4.528, 0, -41.284), Vector(15.951, 0, 6.898), Vector(-13.208, 0, -42.760), Vector(3.900, 0, 4.982), Vector(-9.538, 0, -45.867), Vector(6.926, 0, -15.400), Vector(-1.773, 0, -64.752), Vector(19.055, 0, -13.551), Vector(12.123, 0, -62.319), Vector(20.974, 0, -18.600), Vector(11.536, 0, -59.104), Vector(18.649, 0, -34.258), Vector(9.419, 0, -59.397), Vector(22.683, 0, -34.942), Vector(7.733, 0, -51.033), Vector(21.505, 0, -40.271), Vector(-3.926, 0, -53.148), Vector(6.957, 0, -37.471), Vector(-7.810, 0, -55.905), Vector(5.765, 0, -45.599), Vector(-6.390, 0, -39.251), Vector(-3.982, 0, -47.472), Vector(-13.594, 0, -40.630), Vector(-4.428, 0, -44.982), Vector(-13.982, 0, -38.494), Vector(-22.431, 0, -48.236), Vector(-23.593, 0, -40.183), Vector(-22.139, 0, -50.030), Vector(-37.304, 0, -28.418), Vector(-127.596, 0, 27.117), Vector(-32.801, 0, -27.547), Vector(-101.112, 0, -14.010), Vector(-137.780, 0, -7.618), Vector(-23.263, 0, -42.435), Vector(-29.943, 0, -43.538), Vector(-134.257, 0, 15.924), Vector(-33.901, 0, -21.236), Vector(-135.687, 0, 7.064), Vector(-39.338, 0, -22.223), Vector(-128.075, 0, 5.810), Vector(-53.171, 0, -41.579), Vector(-126.697, 0, 14.594), Vector(-46.954, 0, -41.390), Vector(-139.130, 0, 16.701), Vector(-46.604, 0, -48.780), Vector(1.228, 0, -4.361), Vector(-43.085, 0, -48.658), Vector(-143.160, 0, 13.137), Vector(-42.950, 0, -52.178), Vector(-144.573, 0, 4.561), Vector(-49.800, 0, -52.393), Vector(-147.564, 0, 5.042), Vector(-50.110, 0, -44.465), Vector(-148.330, 0, -0.154), Vector(-53.049, 0, -44.573), Vector(-164.237, 0, 2.546), Vector(-20.450, 0, -14.444), Vector(-162.174, 0, 15.568), Vector(-40.997, 0, -16.523), Vector(-5.454, 0, 4.782), Vector(-60.220, 0, -22.628), Vector(-156.571, 0, 19.568), Vector(-60.243, 0, -19.459), Vector(-154.564, 0, 31.899), Vector(-61.291, 0, -14.496), Vector(-2.630, 0, 5.844), Vector(-67.746, 0, -7.249), Vector(-158.365, 0, 36.479), Vector(-61.897, 0, -6.201), Vector(-156.033, 0, 50.449), Vector(-61.222, 0, -9.836), Vector(-158.842, 0, 7.151), Vector(-155.800, 0, 6.601), Vector(-154.684, 0, 12.459), Vector(-152.488, 0, 44.046), Vector(-133.289, 0, 40.718), Vector(-133.736, 0, 37.767), Vector(-150.609, 0, 37.101), Vector(-149.468, 0, 43.510), Vector(-84.848, 0, -18.518), Vector(-87.895, 0, -18.994), Vector(-89.992, 0, -6.411), Vector(-100.590, 0, -8.117), Vector(-103.083, 0, -7.740), Vector(-104.625, 0, -6.029), Vector(-137.035, 0, -1.874), Vector(-101.278, 0, -5.188), Vector(-87.418, 0, -3.062), Vector(-29.281, 0, 0.008), Vector(-15.065, 0, -2.829), Vector(-21.137, 0, 1.855), Vector(-11.691, 0, 0.578), Vector(-10.381, 0, 9.940), Vector(-23.103, 0, 11.571), Vector(-24.268, 0, 2.298), Vector(-14.561, 0, 1.030), Vector(-21.752, 0, -2.004), Vector(-29.633, 0, 6.162), Vector(-28.696, 0, 11.404), Vector(-23.299, 0, 10.705), Vector(-28.967, 0, -8.539), Vector(-19.713, 0, -18.696), Vector(-5.576, 0, -12.370), Vector(1.950, 0, -12.790), Vector(6.423, 0, -12.207), Vector(0.004, 0, -23.895), Vector(-1.439, 0, -20.674), Vector(-5.566, 0, -20.540), Vector(-7.613, 0, -23.392), Vector(-5.801, 0, -27.083), Vector(-1.976, 0, -27.150), Vector(-0.365, 0, -46.758), Vector(1.607, 0, -33.069), Vector(6.150, 0, -33.760), Vector(6.039, 0, -34.459), Vector(7.912, 0, -21.625), Vector(16.747, 0, -23.079), Vector(14.986, 0, -35.829), Vector(17.363, 0, -19.640), Vector(4.550, 0, 0.627), Vector(16.797, 0, 2.528), Vector(17.412, 0, -1.442), Vector(21.886, 0, -0.743), Vector(25.017, 0, -2.029), Vector(25.688, 0, -6.195), Vector(22.640, 0, -8.572), Vector(18.558, 0, -9.131), Vector(18.838, 0, -11.200), Vector(10.869, 0, -12.375), Vector(11.205, 0, -14.751), Vector(18.027, 0, -5.245), Vector(22.025, 0, -4.630), Vector(4.382, 0, 1.667), Vector(1.430, 0, 1.197), Vector(3.577, 0, -12.526), Vector(-2.882, 0, -58.997), Vector(-14.671, 0, -60.930), Vector(-16.690, 0, -49.713), Vector(-15.395, 0, -57.306), Vector(-25.493, 0, -59.239), Vector(-26.266, 0, -55.181), Vector(-37.282, 0, -57.113), Vector(-38.104, 0, -52.765), Vector(-26.591, 0, -50.889), Vector(-27.909, 0, -43.150), Vector(-24.382, 0, -42.618), Vector(-22.933, 0, -50.735), Vector(-12.171, 0, -48.862), Vector(-104.535, 0, -13.440), Vector(-106.447, 0, -24.177), Vector(-120.640, 0, -21.694), Vector(-120.036, 0, -18.104), Vector(-138.960, 0, -14.916), Vector(-129.953, 0, -8.971), Vector(-126.175, 0, 15.013), Vector(-128.407, 0, 0.982), Vector(-136.331, 0, 2.286), Vector(-140.925, 0, 17.700), Vector(-1.456, 0, -5.536), Vector(-148.626, 0, 13.855), Vector(-157.323, 0, 15.594), Vector(-151.832, 0, 5.882), Vector(-150.389, 0, 14.203), Vector(-127.503, 0, 27.606), Vector(-139.596, 0, 29.680), Vector(-138.058, 0, 38.510), Vector(-126.198, 0, 36.460), Vector(-114.077, 0, -1.222), Vector(-111.980, 0, 1.742), Vector(-108.187, 0, -2.105), Vector(-110.186, 0, 12.507), Vector(-98.675, 0, 10.549), Vector(-143.612, 0, 2.152), Vector(-102.590, 0, 7.031), Vector(-108.158, 0, 8.010), Vector(-108.461, 0, 5.796), Vector(-106.760, 0, 4.654), Vector(-102.566, 0, 3.979), Vector(-101.311, 0, 11.032), Vector(-95.460, 0, 10.130), Vector(-107.582, 0, 1.227), Vector(-99.380, 0, -0.264), Vector(-98.075, 0, 7.146), Vector(-95.978, 0, 6.843), Vector(-107.908, 0, -0.730), Vector(-113.034, 0, 0.179), Vector(-141.968, 0, 11.480), Vector(-137.975, 0, 14.130), Vector(-134.687, 0, 13.526), Vector(-141.028, 0, -1.438), Vector(-154.756, 0, 30.431), Vector(-158.078, 0, 31.169), Vector(-161.097, 0, 29.055), Vector(-162.037, 0, 24.257), Vector(-160.259, 0, 20.969), Vector(-156.568, 0, 20.331), Vector(-40.359, 0, -11.047), Vector(-27.039, 0, -17.188), Vector(-23.097, 0, -16.489), Vector(-34.398, 0, -18.353), Vector(-164.144, 0, 3.058), Vector(-170.519, 0, 4.316), Vector(-166.573, 0, 27.105), Vector(-168.103, 0, 29.763), Vector(-172.077, 0, 30.407), Vector(-176.131, 0, 27.807), Vector(-182.869, 0, 28.002), Vector(-186.952, 0, 31.246), Vector(-189.021, 0, 35.803), Vector(-188.322, 0, 41.312), Vector(-185.749, 0, 44.695), Vector(-181.164, 0, 47.071), Vector(-174.565, 0, 46.065), Vector(-170.818, 0, 41.535), Vector(-167.240, 0, 40.892), Vector(-165.087, 0, 42.094), Vector(-164.136, 0, 47.547), Vector(-159.914, 0, 50.371), Vector(-156.167, 0, 49.672), Vector(-156.754, 0, 46.149), Vector(-159.578, 0, 44.471), Vector(-160.529, 0, 38.991), Vector(-164.667, 0, 36.335), Vector(-171.545, 0, 37.537), Vector(-173.559, 0, 36.279), Vector(-172.077, 0, 34.489), Vector(-164.947, 0, 33.203), Vector(-162.241, 0, 29.434), Vector(-164.560, 0, 15.229), Vector(-162.386, 0, 14.843), Vector(-58.428, 0, -9.300), Vector(-58.195, 0, -10.087), Vector(-48.474, 0, -8.321), Vector(-48.978, 0, -5.441), Vector(-55.828, 0, -6.616), Vector(-57.226, 0, 0.431), Vector(-68.969, 0, -1.778), Vector(-69.775, 0, 3.818), Vector(-66.876, 0, 4.342), Vector(-68.285, 0, 11.589), Vector(-53.186, 0, 14.287), Vector(-51.898, 0, 6.556), Vector(-41.429, 0, 8.247), Vector(-39.215, 0, -3.792), Vector(-45.697, 0, -4.999), Vector(-44.530, 0, -11.643), Vector(-88.049, 0, -57.397), Vector(-91.876, 0, -49.454), Vector(-88.944, 0, -48.075), Vector(-92.109, 0, -40.639), Vector(-95.080, 0, -41.920), Vector(-98.317, 0, -33.996), Vector(-90.731, 0, -30.614), Vector(-92.471, 0, -26.556), Vector(-99.767, 0, -29.600), Vector(-102.279, 0, -32.402), Vector(-102.279, 0, -36.509), Vector(-99.042, 0, -43.901), Vector(-99.815, 0, -46.172), Vector(-101.603, 0, -46.993), Vector(-105.033, 0, -34.818), Vector(-113.198, 0, -35.687), Vector(-113.539, 0, -31.661), Vector(-120.615, 0, -31.921), Vector(-120.011, 0, -36.461), Vector(-120.687, 0, -36.509), Vector(-117.209, 0, -51.525), Vector(-110.135, 0, -65.614), Vector(-109.671, 0, -65.266), Vector(-105.207, 0, -71.528), Vector(-99.525, 0, -66.890), Vector(-103.583, 0, -61.440), Vector(-96.916, 0, -56.338), Vector(-100.047, 0, -50.830), Vector(-98.133, 0, -50.192), Vector(-95.756, 0, -51.236), Vector(-91.756, 0, -59.990), Vector(-89.205, 0, -61.440), Vector(-86.132, 0, -61.324), Vector(-65.781, 0, -52.279), Vector(28.487, 0, -55.883), Vector(25.676, 0, -40.228), Vector(16.937, 0, -58.017), Vector(12.486, 0, -34.318), Vector(6.414, 0, -43.755), Vector(4.852, 0, -35.815), Vector(-18.553, 0, 44.842), Vector(-6.899, 0, 42.465), Vector(-18.785, 0, 26.347), Vector(-16.640, 0, 36.725), Vector(-12.755, 0, 35.913), Vector(-11.944, 0, 39.856), Vector(-7.653, 0, 39.044), Vector(-11.422, 0, 61.308), Vector(11.654, 0, 56.554), Vector(10.204, 0, 49.075), Vector(18.147, 0, 47.567), Vector(12.523, 0, 20.259), Vector(12.069, 0, 34.841), Vector(8.474, 0, 16.868), Vector(19.027, 0, 14.781), Vector(10.098, 0, 24.927), Vector(-17.616, 0, 30.377), Vector(-9.682, 0, 28.898), Vector(-3.363, 0, 59.511), Vector(-8.523, 0, 28.550), Vector(-9.798, 0, 21.361), Vector(3.015, 0, 18.694), Vector(4.522, 0, 25.999), Vector(1.391, 0, 26.579), Vector(0.754, 0, 23.564), Vector(-5.624, 0, 24.781), Vector(-4.928, 0, 27.912), Vector(-6.494, 0, 17.940), Vector(-5.914, 0, 20.433), Vector(-1.623, 0, 16.954), Vector(-1.044, 0, 19.447), Vector(-39.964, 0, -20.423), Vector(5.081, 0, -36.776), Vector(1.191, 0, -36.136), Vector(5.859, 0, -41.215), Vector(0.550, 0, -40.392));
		Global.e = Array(4, 0, 0, 1, 1, 3, 3, 2, 5, 4, 6, 5, 7, 6, 8, 7, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 17, 17, 18, 19, 9, 20, 19, 21, 20, 22, 21, 257, 24, 26, 25, 24, 26, 27, 28, 28, 29, 29, 30, 30, 31, 31, 32, 18, 33, 33, 34, 34, 35, 35, 36, 36, 37, 37, 38, 38, 39, 39, 40, 40, 41, 41, 42, 248, 135, 45, 407, 46, 45, 47, 46, 48, 47, 44, 48, 42, 286, 50, 49, 51, 1, 52, 51, 53, 52, 4, 53, 54, 50, 55, 54, 56, 55, 57, 56, 58, 57, 320, 58, 60, 59, 61, 60, 62, 61, 63, 62, 64, 63, 65, 22, 66, 65, 67, 66, 68, 67, 64, 68, 69, 70, 70, 71, 71, 72, 72, 73, 73, 74, 74, 75, 75, 76, 78, 178, 77, 78, 146, 43, 187, 80, 80, 81, 81, 82, 82, 83, 83, 376, 84, 85, 85, 86, 86, 87, 87, 388, 88, 89, 89, 91, 91, 93, 93, 95, 95, 97, 97, 99, 99, 101, 101, 103, 103, 105, 105, 107, 107, 109, 109, 111, 111, 113, 113, 115, 115, 117, 69, 117, 25, 119, 29, 119, 122, 121, 125, 242, 108, 94, 129, 127, 112, 237, 131, 129, 90, 92, 42, 69, 133, 131, 115, 123, 98, 96, 155, 149, 96, 106, 102, 370, 137, 133, 100, 98, 106, 104, 139, 137, 112, 110, 141, 139, 106, 110, 116, 114, 143, 141, 114, 112, 123, 116, 145, 143, 120, 118, 128, 126, 147, 145, 124, 123, 132, 130, 136, 134, 157, 153, 134, 132, 142, 140, 140, 138, 128, 148, 144, 142, 154, 152, 161, 164, 150, 148, 160, 158, 159, 157, 158, 156, 151, 147, 141, 161, 162, 163, 149, 248, 164, 165, 165, 166, 167, 168, 169, 170, 170, 171, 171, 172, 172, 173, 173, 174, 174, 263, 176, 261, 176, 177, 179, 186, 195, 196, 181, 182, 182, 183, 183, 184, 193, 194, 76, 192, 191, 146, 188, 189, 79, 191, 76, 190, 187, 190, 186, 180, 179, 185, 181, 184, 196, 197, 197, 198, 198, 199, 199, 200, 195, 200, 201, 202, 202, 203, 204, 205, 205, 206, 207, 204, 208, 207, 209, 210, 210, 211, 211, 212, 212, 213, 213, 214, 214, 215, 215, 216, 216, 217, 217, 218, 218, 219, 211, 220, 220, 221, 222, 223, 223, 224, 225, 226, 226, 227, 228, 229, 229, 230, 230, 231, 231, 232, 233, 234, 235, 236, 236, 237, 238, 239, 239, 240, 240, 241, 241, 242, 243, 244, 245, 246, 244, 247, 135, 155, 247, 249, 249, 250, 251, 252, 253, 254, 254, 255, 255, 256, 258, 260, 257, 258, 23, 259, 260, 261, 279, 262, 263, 264, 264, 265, 265, 266, 266, 267, 267, 268, 268, 269, 259, 270, 270, 271, 271, 272, 272, 273, 274, 275, 262, 276, 276, 277, 277, 278, 175, 279, 280, 281, 281, 282, 282, 283, 283, 284, 284, 285, 49, 287, 288, 289, 290, 291, 291, 292, 292, 293, 293, 294, 294, 295, 295, 296, 296, 297, 297, 298, 298, 299, 299, 300, 300, 301, 301, 302, 302, 303, 303, 304, 304, 305, 305, 306, 306, 307, 307, 308, 309, 310, 310, 311, 311, 312, 312, 313, 313, 314, 314, 315, 315, 316, 316, 317, 317, 318, 318, 319, 321, 322, 322, 323, 323, 324, 324, 325, 325, 326, 327, 328, 328, 329, 329, 330, 330, 331, 331, 332, 332, 333, 333, 334, 334, 335, 17, 336, 336, 337, 337, 338, 338, 339, 339, 340, 340, 341, 341, 342, 343, 344, 344, 345, 345, 346, 346, 347, 347, 348, 348, 349, 349, 350, 350, 351, 351, 352, 353, 354, 354, 355, 355, 356, 356, 357, 357, 358, 358, 359, 360, 361, 361, 362, 362, 363, 363, 364, 364, 365, 365, 366, 366, 367, 367, 368, 368, 369, 359, 360, 352, 353, 370, 371, 371, 374, 372, 373, 373, 375, 102, 375, 376, 377, 378, 379, 379, 380, 380, 381, 381, 382, 383, 384, 384, 385, 385, 386, 386, 387, 389, 390, 391, 392, 393, 394, 383, 392, 395, 396, 396, 397, 397, 398, 399, 400, 400, 401, 401, 402, 403, 404, 405, 406, 408, 409, 410, 411);
	}
}

rule("calc_sectors")
{
	event
	{
		Subroutine;
		calc_sectors;
	}

	actions
	{
		Global.sector_v = Empty Array;
		"for each center point Global.c[loop_i]"
		For Global Variable(loop_i, 0, Count Of(Global.c), 1);
			Global.temp_arr = Sorted Array(Global.e_c, Distance Between(Global.c[Global.loop_i], Current Array Element));
			Wait(0.128, Ignore Condition);
			"edge centers that are closest to center"
			Global.temp_arr = Array Slice(Global.temp_arr, 0, Global.maxbeams);
			Global.temp_arr_v = Empty Array;
			For Global Variable(loop_j, 0, Count Of(Global.temp_arr), 1);
				"index of the edge center in the list of edge centers"
				Global.temp_index = Index Of Array Value(Global.e_c, Global.temp_arr[Global.loop_j]);
				Modify Global Variable(temp_arr_v, Append To Array, Global.v[Global.e[2 * Global.temp_index]]);
				Modify Global Variable(temp_arr_v, Append To Array, Global.v[Global.e[2 * Global.temp_index + 1]]);
				disabled Wait(0.016, Ignore Condition);
			End;
			Modify Global Variable(sector_v, Append To Array, Array(Global.temp_arr_v));
			Wait(0.016, Ignore Condition);
		End;
	}
}

rule("calc_clipper")
{
	event
	{
		Subroutine;
		clipper_circ;
	}

	actions
	{
		For Player Variable(Event Player, loop_i, 0, Count Of(Event Player.v), 2);
			Event Player.p1d = Dot Product(Event Player.v[Event Player.loop_i], Event Player.v[Event Player.loop_i]);
			Event Player.p2d = Dot Product(Event Player.v[Event Player.loop_i + 1], Event Player.v[Event Player.loop_i + 1]);
			If(Event Player.p1d < 1 && Event Player.p2d < 1);
				Continue;
			Else If(Event Player.p1d >= 1 && Event Player.p2d >= 1);
				Event Player.v[Event Player.loop_i] = 9999 * Down;
				Event Player.v[Event Player.loop_i + 1] = 9999 * Down;
			Else;
				If(Event Player.p1d >= 1);
					Event Player.v[Event Player.loop_i] = Event Player.v[Event Player.loop_i + 1] + (1 - Event Player.p2d) / (Event Player.p1d - Event Player.p2d) * (Event Player.v[Event Player.loop_i] - Event Player.v[Event Player.loop_i + 1]);
				Else;
					Event Player.v[Event Player.loop_i + 1] = Event Player.v[Event Player.loop_i] + (1 - Event Player.p1d) / (Event Player.p2d - Event Player.p1d) * (Event Player.v[Event Player.loop_i + 1] - Event Player.v[Event Player.loop_i]);
				End;
			End;
		End;
	}
}

rule("calc_liangbarsky")
{
	event
	{
		Subroutine;
		clipper_liangbarsky;
	}

	actions
	{
		"liang_barsky_clipper, shameless copy-paste from wiki"
		For Player Variable(Event Player, loop_i, 0, Count Of(Event Player.v), 2);
			"x1"
			Event Player.lb_arr[0] = X Component Of(Event Player.v[Event Player.loop_i]);
			"x2"
			Event Player.lb_arr[1] = X Component Of(Event Player.v[Event Player.loop_i + 1]);
			"y1"
			Event Player.lb_arr[2] = Y Component Of(Event Player.v[Event Player.loop_i]);
			"y2"
			Event Player.lb_arr[3] = Y Component Of(Event Player.v[Event Player.loop_i + 1]);
			"p1 = -(x2 - x1) = x1 - x2"
			Event Player.lb_arr[4] = Event Player.lb_arr[0] - Event Player.lb_arr[1];
			"p2 = -p1"
			Event Player.lb_arr[5] = -1 * Event Player.lb_arr[4];
			"p3 = -(y2 - y1) = y1 - y2"
			Event Player.lb_arr[6] = Event Player.lb_arr[2] - Event Player.lb_arr[3];
			"p4 = -p3"
			Event Player.lb_arr[7] = -1 * Event Player.lb_arr[6];
			"q1 = x1 - xmin, xmin = -1 so q1 = x1 + 1"
			Event Player.lb_arr[8] = Event Player.lb_arr[0] + 1;
			"q2 = xmax - x1 = 1 - x1"
			Event Player.lb_arr[9] = 1 - Event Player.lb_arr[0];
			"q3 = y1 - ymin = y1 + 1"
			Event Player.lb_arr[10] = Event Player.lb_arr[2] + 1;
			"q4 = ymax - y1"
			Event Player.lb_arr[11] = 1 - Event Player.lb_arr[2];
			"[12] pos min, [13] neg max"
			Event Player.lb_arr[12] = 1;
			Event Player.lb_arr[13] = 0;
			"parallel"
			If((Event Player.lb_arr[4] == 0 && Event Player.lb_arr[8] < 0) || (Event Player.lb_arr[5] == 0 && Event Player.lb_arr[9] < 0) || (Event Player.lb_arr[6] == 0 && Event Player.lb_arr[10] < 0) || (Event Player.lb_arr[7] == 0 && Event Player.lb_arr[11] < 0));
				Event Player.v[Event Player.loop_i] = 9999 * Down;
				Event Player.v[Event Player.loop_i + 1] = 9999 * Down;
				Continue;
			End;
			If(Event Player.lb_arr[4] != 0);
				If(Event Player.lb_arr[4] < 0);
					"posarr[1] = r2 = q2 / p2"
					Event Player.lb_arr[12] = Min(Event Player.lb_arr[12], Event Player.lb_arr[9] / Event Player.lb_arr[5]);
					"negarr[1] = r1 = q1 / p1"
					Event Player.lb_arr[13] = Max(Event Player.lb_arr[13], Event Player.lb_arr[8] / Event Player.lb_arr[4]);
				Else;
					"invert the order"
					Event Player.lb_arr[12] = Min(Event Player.lb_arr[12], Event Player.lb_arr[8] / Event Player.lb_arr[4]);
					Event Player.lb_arr[13] = Max(Event Player.lb_arr[13], Event Player.lb_arr[9] / Event Player.lb_arr[5]);
				End;
			End;
			If(Event Player.lb_arr[6] != 0);
				If(Event Player.lb_arr[6] < 0);
					"posarr[1] = r4 = q4 / p4"
					Event Player.lb_arr[12] = Min(Event Player.lb_arr[12], Event Player.lb_arr[11] / Event Player.lb_arr[7]);
					"negarr[1] = r3 = q3 / p3"
					Event Player.lb_arr[13] = Max(Event Player.lb_arr[13], Event Player.lb_arr[10] / Event Player.lb_arr[6]);
				Else;
					"invert the order"
					Event Player.lb_arr[12] = Min(Event Player.lb_arr[12], Event Player.lb_arr[10] / Event Player.lb_arr[6]);
					Event Player.lb_arr[13] = Max(Event Player.lb_arr[13], Event Player.lb_arr[11] / Event Player.lb_arr[7]);
				End;
			"now rn1 = [13], rn2 = [12]"
			End;
			"if (rn1 > rn2)"
			If(Event Player.lb_arr[13] > Event Player.lb_arr[12]);
				"reject, line outside"
				Event Player.v[Event Player.loop_i] = 9999 * Down;
				Event Player.v[Event Player.loop_i + 1] = 9999 * Down;
				Continue;
			End;
			"finally compute new points, xn1 = x1 + p2 * rn1; yn1 = y1 + p4 * rn1;"
			Event Player.v[Event Player.loop_i] = (Event Player.lb_arr[0] + Event Player.lb_arr[5] * Event Player.lb_arr[13]) * Left + (Event Player.lb_arr[2] + Event Player.lb_arr[7] * Event Player.lb_arr[13]) * Up;
			"xn2 = x1 + p2 * rn2; yn2 = y1 + p4 * rn2;"
			Event Player.v[Event Player.loop_i + 1] = (Event Player.lb_arr[0] + Event Player.lb_arr[5] * Event Player.lb_arr[12]) * Left + (Event Player.lb_arr[2] + Event Player.lb_arr[7] * Event Player.lb_arr[12]) * Up;
		End;
	}
}

rule("calc_liangbarsky2")
{
	event
	{
		Subroutine;
		clipper_liangbarsky2;
	}

	actions
	{
		"liang_barsky_clipper"
		For Player Variable(Event Player, loop_lb, 0, 128, 2);
			Event Player.x1 = X Component Of(Event Player.v[Event Player.loop_lb]);
			Event Player.x2 = X Component Of(Event Player.v[Event Player.loop_lb + 1]);
			Event Player.y1 = Y Component Of(Event Player.v[Event Player.loop_lb]);
			Event Player.y2 = Y Component Of(Event Player.v[Event Player.loop_lb + 1]);
			Event Player.p1 = Event Player.x1 - Event Player.x2;
			Event Player.p2 = -1 * Event Player.p1;
			Event Player.p3 = Event Player.y1 - Event Player.y2;
			Event Player.p4 = -1 * Event Player.p3;
			Event Player.q1 = Event Player.x1 + 1;
			Event Player.q2 = 1 - Event Player.x1;
			Event Player.q3 = Event Player.y1 + 1;
			Event Player.q4 = 1 - Event Player.y1;
			If((Event Player.p1 == 0 && Event Player.q1 < 0) || (Event Player.p2 == 0 && Event Player.q2 < 0) || (Event Player.p3 == 0 && Event Player.q3 < 0) || (Event Player.p4 == 0 && Event Player.q4 < 0));
				Event Player.v[Event Player.loop_lb] = 9999 * Down;
				Event Player.v[Event Player.loop_lb + 1] = 9999 * Down;
				Skip(28);
			End;
			Event Player.posarr = 1;
			Event Player.negarr = 0;
			If(Event Player.p1 != 0);
				If(Event Player.p1 < 0);
					Event Player.negarr = Max(Event Player.negarr, Event Player.q1 / Event Player.p1);
					Event Player.posarr = Min(Event Player.posarr, Event Player.q2 / Event Player.p2);
				Else;
					Event Player.negarr = Max(Event Player.negarr, Event Player.q2 / Event Player.p2);
					Event Player.posarr = Min(Event Player.posarr, Event Player.q1 / Event Player.p1);
				End;
			End;
			If(Event Player.p3 != 0);
				If(Event Player.p3 < 0);
					Event Player.negarr = Max(Event Player.negarr, Event Player.q3 / Event Player.p3);
					Event Player.posarr = Min(Event Player.posarr, Event Player.q4 / Event Player.p4);
				Else;
					Event Player.negarr = Max(Event Player.negarr, Event Player.q4 / Event Player.p4);
					Event Player.posarr = Min(Event Player.posarr, Event Player.q3 / Event Player.p3);
				End;
			End;
			If(Event Player.negarr > Event Player.posarr);
				Event Player.v[Event Player.loop_lb] = 9999 * Down;
				Event Player.v[Event Player.loop_lb + 1] = 9999 * Down;
				Skip(3);
			End;
			Event Player.v[Event Player.loop_lb] = (Event Player.x1 + Event Player.p2 * Event Player.negarr) * Left + (Event Player.y1 + Event Player.p4 * Event Player.negarr) * Up;
			Event Player.v[Event Player.loop_lb + 1] = (Event Player.x1 + Event Player.p2 * Event Player.posarr) * Left + (Event Player.y1 + Event Player.p4 * Event Player.posarr) * Up;
			disabled Wait(0.016, Ignore Condition);
			disabled Enable Inspector Recording;
			disabled Disable Inspector Recording;
		End;
	}
}

rule("clipper_circular_2")
{
	event
	{
		Subroutine;
		clipper_circ2;
	}

	actions
	{
		"custom circular clipper v2"
		For Player Variable(Event Player, loop_i, 0, Count Of(Event Player.v), 2);
			Event Player.clip_circ[0] = Normalize(Event Player.v[Event Player.loop_i + 1] - Event Player.v[Event Player.loop_i]);
			Event Player.clip_circ[5] = -1 * Dot Product(Event Player.v[Event Player.loop_i], Event Player.clip_circ[0]);
			Event Player.clip_circ[6] = Event Player.v[Event Player.loop_i] + Min(1, Max(0, Event Player.clip_circ[5] / Distance Between(Event Player.v[Event Player.loop_i], Event Player.v[Event Player.loop_i + 1]))) * (Event Player.v[Event Player.loop_i + 1] - Event Player.v[Event Player.loop_i]);
			Event Player.clip_circ[6] = Dot Product(Event Player.clip_circ[6], Event Player.clip_circ[6]);
			"completely oob"
			If(Event Player.clip_circ[6] > 1);
				Event Player.v[Event Player.loop_i] = 9999 * Down;
				Event Player.v[Event Player.loop_i + 1] = 9999 * Down;
			Else;
				Event Player.clip_circ[1] = Event Player.v[Event Player.loop_i] + Event Player.clip_circ[5] * Event Player.clip_circ[0];
				Event Player.clip_circ[2] = Dot Product(Event Player.clip_circ[1], Event Player.clip_circ[1]);
				Event Player.clip_circ[3] = Dot Product(Event Player.v[Event Player.loop_i], Event Player.v[Event Player.loop_i]);
				Event Player.clip_circ[4] = Dot Product(Event Player.v[Event Player.loop_i + 1], Event Player.v[Event Player.loop_i + 1]);
				"p2 oob"
				If(Event Player.clip_circ[4] > 1);
					Event Player.v[Event Player.loop_i + 1] = Event Player.clip_circ[1] + Square Root(1 - Event Player.clip_circ[2]) * Event Player.clip_circ[0];
				End;
				"p1 oob"
				If(Event Player.clip_circ[3] > 1);
					Event Player.v[Event Player.loop_i] = Event Player.clip_circ[1] - Square Root(1 - Event Player.clip_circ[2]) * Event Player.clip_circ[0];
				End;
			End;
		End;
	}
}