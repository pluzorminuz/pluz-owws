settings
{
	lobby
	{
		Allow Players Who Are In Queue: Yes
		Max Team 1 Players: 11
		Max Team 2 Players: 1
	}

	modes
	{
		Assault
		{
			Capture Speed Modifier: 500%

			enabled maps
			{
				Volskaya Industries
			}
		}

		Control
		{
			Limit Valid Control Points: Third

			enabled maps
			{
			}
		}

		Hybrid
		{
			Capture Speed Modifier: 10%

			enabled maps
			{
			}
		}

		disabled Practice Range
		{
			Training Partner: Off
		}

		General
		{
			Game Mode Start: Immediately
			Hero Limit: Off
			Respawn Time Scalar: 0%
		}
	}

	workshop
	{
		Use Control Point 2CP: 1
	}
}

variables
{
	global:
		0: array_loop
		1: bap_pos
		2: signal
		3: move_dir
		4: step_resolution
		5: baptiste_distance_z
		6: hit_8
		7: miss_9
		8: loop_count
		9: total
		10: _hero
		11: intro
		12: hit_0_14
		13: hit_1_15
		14: hit_2_16
		15: hit_3_17
		16: hit_4_18
		17: hit_5_19
		18: hit_6_20
		19: hit_7_21
		20: miss_0_22
		21: miss_1_23
		22: miss_2_24
		23: miss_3_25
		24: miss_4_26
		25: miss_5_27
		26: miss_6_28
		27: miss_7_29
		28: cp_mode

	player:
		0: self_pos_lock
		1: intro_mode
		3: current_dir
		4: time
		5: move_dir
}

subroutines
{
	0: init_global
	1: control
	2: distrib_array
	3: hybrid
	4: cp
}

rule("init")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Disable Inspector Recording;
		Disable Built-In Game Mode Completion;
		Global.cp_mode = Workshop Setting Integer(Custom String("Main"), Custom String("Use Control Point (2CP)"), 0, 0, 1);
		disabled Global.baptiste_distance_z = Vector(0.541, 0.461, 0.613);
		disabled Global.baptiste_distance_z = Vector(0.003, 1.359, 0.011);
		Global.baptiste_distance_z = Vector(-0.453, 0.523, -0.219);
		Global.step_resolution = 0.010;
		Call Subroutine(init_global);
		If(Current Game Mode == Game Mode(Control));
			Call Subroutine(control);
		Else If(Current Game Mode == Game Mode(Hybrid));
			Call Subroutine(hybrid);
		Else If(Current Game Mode == Game Mode(Assault));
			Call Subroutine(cp);
		End;
	}
}

rule("sigma ult loop")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Is Game In Progress == True;
		disabled Objective Index == 1;
		Total Time Elapsed > 13;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Global.signal = True;
		Wait(0.016, Ignore Condition);
		Global.signal = False;
		Global.total += 1;
		Global.loop_count += 1;
		If(Global.loop_count == 83);
			disabled Call Subroutine(distrib_array);
			Enable Inspector Recording;
			Disable Inspector Recording;
			Global.hit_8 = Empty Array;
			Global.miss_9 = Empty Array;
			Global.loop_count = 0;
			disabled If(Global.array_loop >= 8);
			disabled Global.array_loop = 0;
			disabled Else;
			disabled Global.array_loop += 1;
			disabled End;
		End;
		Loop;
	}
}

rule("bap bot init")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		disabled Team Of(Event Player) == Team 1;
	}

	actions
	{
		Event Player.self_pos_lock = Global.bap_pos + Slot Of(Event Player) * Vector((Random Integer(0, 1) * 2 - 1) * X Component Of(
			Global.baptiste_distance_z), Y Component Of(Global.baptiste_distance_z), (Random Integer(0, 1) * 2 - 1) * Z Component Of(
			Global.baptiste_distance_z));
		Event Player.intro_mode = True;
		disabled Event Player.move_dir = Global.move_dir[2 * Random Integer(0, 2)];
		disabled Event Player.current_dir = Random Integer(0, 3);
		"hori"
		disabled Event Player.move_dir = Global.move_dir[0];
		disabled Event Player.current_dir = 2;
		"verts"
		disabled Event Player.move_dir = Global.move_dir[Slot Of(Event Player) % 2 * 2 + 2];
		disabled Event Player.current_dir = 0;
		"vert 1"
		Event Player.move_dir = Global.move_dir[4];
		Event Player.current_dir = 0;
		Disable Movement Collision With Players(Event Player);
		Disable Movement Collision With Environment(Event Player, True);
		Start Forcing Player Position(Event Player, Event Player.self_pos_lock, True);
		disabled Create HUD Text(All Players(All Teams), String("{0} {1} {2}", Slot Of(Event Player), Event Player.current_dir, Position Of(
			Event Player) * 10000), Null, Null, Left, 0, White, White, White, Visible To and String, Visible Always);
		disabled Create HUD Text(All Players(All Teams), String("{0} {1} {2}", Slot Of(Event Player), Event Player.time), Null, Null, Right, 0,
			White, White, White, Visible To and String, Visible Always);
		disabled Start Scaling Player(Event Player, 0.100, False);
	}
}

disabled rule("bap bot move search")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Team Of(Event Player) == Team 1;
		Event Player.intro_mode == True;
		Is Game In Progress == True;
		Global.signal == True;
	}

	actions
	{
		Modify Global Variable(intro, Append To Array, 100000 * Position Of(Event Player));
		Event Player.self_pos_lock += Event Player.move_dir[Event Player.current_dir];
	}
}

rule("bap bot move")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		disabled Team Of(Event Player) == Team 1;
		Is Game In Progress == True;
		Global.signal == True;
	}

	actions
	{
		If(Is On Objective(Event Player) == False);
			Modify Global Variable(miss_9, Append To Array, 100000 * Position Of(Event Player));
			Event Player.current_dir = (Event Player.current_dir + 1) % 4;
			Event Player.self_pos_lock += Event Player.move_dir[Event Player.current_dir];
			Event Player.intro_mode = False;
		Else;
			Modify Global Variable(hit_8, Append To Array, 100000 * Position Of(Event Player));
			If(Event Player.intro_mode != True);
				Event Player.current_dir = (Event Player.current_dir + 2) % 4;
				Event Player.self_pos_lock += Event Player.move_dir[Event Player.current_dir];
				Event Player.current_dir = (Event Player.current_dir + 1) % 4;
			End;
			Event Player.self_pos_lock += Event Player.move_dir[Event Player.current_dir];
		End;
	}
}

disabled rule("bap exit intro")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		Team Of(Event Player) == Team 1;
		Event Player.intro_mode == True;
		Is Game In Progress == True;
		Is On Objective(Event Player) == False;
		Total Time Elapsed > 10;
	}

	actions
	{
		Wait(0.016, Ignore Condition);
		Event Player.intro_mode = False;
		Event Player.current_dir = (Event Player.current_dir + 2) % 4;
	}
}

rule("bap 0")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
		disabled Team Of(Event Player) == Team 1;
		Slot Of(Event Player) == 0;
	}

	actions
	{
		Create Beam Effect(All Players(All Teams), Grapple Beam, Event Player, Position Of(Event Player) + Vector(1, 0, 0), White,
			Visible To Position and Radius);
		Create Beam Effect(All Players(All Teams), Grapple Beam, Event Player, Position Of(Event Player) + Vector(0, 0, 1), White,
			Visible To Position and Radius);
		Create In-World Text(All Players(All Teams), Custom String("+Z"), Position Of(Event Player) + Vector(0, 0, 1.300), 2, Do Not Clip,
			Visible To Position and String, White, Visible Always);
		Create In-World Text(All Players(All Teams), Custom String("+X"), Position Of(Event Player) + Vector(1.300, 0, 0), 2, Do Not Clip,
			Visible To Position and String, White, Visible Always);
	}
}

rule("sub init global")
{
	event
	{
		Subroutine;
		init_global;
	}

	actions
	{
		Global.intro = Empty Array;
		Global.hit_8 = Empty Array;
		Global.miss_9 = Empty Array;
		Global.signal = False;
		Global._hero = Hero(Baptiste);
		Global.move_dir = Array(Array(Vector(1 * Global.step_resolution, 0, 0), Vector(0, 0, -1 * Global.step_resolution), Vector(
			-1 * Global.step_resolution, 0, 0), Vector(0, 0, 1 * Global.step_resolution)), Array(Vector(1 * Global.step_resolution, 0, 0),
			Vector(0, 0, 1 * Global.step_resolution), Vector(-1 * Global.step_resolution, 0, 0), Vector(0, 0,
			-1 * Global.step_resolution)), Array(Vector(1 * Global.step_resolution, 0, 0), Vector(0, -1 * Global.step_resolution, 0),
			Vector(Global.step_resolution * -1, 0, 0), Vector(0, Global.step_resolution, 0)), Array(Vector(1 * Global.step_resolution, 0,
			0), Vector(0, 1 * Global.step_resolution, 0), Vector(Global.step_resolution * -1, 0, 0), Vector(0, -1 * Global.step_resolution,
			0)), Array(Vector(0, 1 * Global.step_resolution, 0), Vector(0, 0, 1 * Global.step_resolution), Vector(0,
			-1 * Global.step_resolution, 0), Vector(0, 0, -1 * Global.step_resolution)), Array(Vector(0, 1 * Global.step_resolution, 0),
			Vector(0, 0, -1 * Global.step_resolution), Vector(0, -1 * Global.step_resolution, 0), Vector(0, 0,
			1 * Global.step_resolution)));
		"lock y CCW +x -z -x +z horizontal"
		disabled Global.move_dir = Array(Vector(1 * Global.step_resolution, 0, 0), Vector(0, 0, -1 * Global.step_resolution), Vector(
			-1 * Global.step_resolution, 0, 0), Vector(0, 0, 1 * Global.step_resolution));
		"lock y CW +x +z -x -z horizontal alt"
		disabled Global.move_dir = Array(Vector(1 * Global.step_resolution, 0, 0), Vector(0, 0, 1 * Global.step_resolution), Vector(
			-1 * Global.step_resolution, 0, 0), Vector(0, 0, -1 * Global.step_resolution));
		"lock z CW +x -y -x +y update"
		disabled Global.move_dir = Array(Vector(1 * Global.step_resolution, 0, 0), Vector(0, -1 * Global.step_resolution, 0), Vector(
			Global.step_resolution * -1, 0, 0), Vector(0, Global.step_resolution, 0));
		"lock z CCW +x +y -x -y update alt"
		disabled Global.move_dir = Array(Vector(1 * Global.step_resolution, 0, 0), Vector(0, 1 * Global.step_resolution, 0), Vector(
			Global.step_resolution * -1, 0, 0), Vector(0, -1 * Global.step_resolution, 0));
		"lock x CCW +y +z -y -z"
		disabled Global.move_dir = Array(Vector(0, 1 * Global.step_resolution, 0), Vector(0, 0, 1 * Global.step_resolution), Vector(0,
			-1 * Global.step_resolution, 0), Vector(0, 0, -1 * Global.step_resolution));
		"lock x CW +y -z -y +z"
		disabled Global.move_dir = Array(Vector(0, 1 * Global.step_resolution, 0), Vector(0, 0, -1 * Global.step_resolution), Vector(0,
			-1 * Global.step_resolution, 0), Vector(0, 0, 1 * Global.step_resolution));
		Create HUD Text(All Players(All Teams), Global.loop_count, Null, Null, Left, 0, White, White, White, Visible To and String,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Global.total, Null, Null, Left, 0, White, White, White, Visible To and String,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Global.array_loop, Null, Null, Left, 0, White, White, White, Visible To and String,
			Default Visibility);
	}
}

rule("sub koth")
{
	event
	{
		Subroutine;
		control;
	}

	actions
	{
		Wait(0.250, Ignore Condition);
		Set Match Time(0);
		Wait(0.250, Ignore Condition);
		Set Match Time(0);
		Wait(0.250, Ignore Condition);
		Set Match Time(0);
		disabled Global.bap_pos = Vector(-52.124, 20.762, -5.109);
		Global.bap_pos = Objective Position(Objective Index);
		Create Dummy Bot(Global._hero, Team 1, 0, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 2, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 3, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 4, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 5, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 6, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 7, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 8, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 9, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 10, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 11, Vector(0, 0, 0), Vector(0, 0, 0));
	}
}

rule("sub distrib array")
{
	event
	{
		Subroutine;
		distrib_array;
	}

	actions
	{
		If(Global.array_loop == 0);
			Global.hit_0_14 = Global.hit_8;
			Global.miss_0_22 = Global.miss_9;
		Else If(Global.array_loop == 1);
			Global.hit_1_15 = Global.hit_8;
			Global.miss_1_23 = Global.miss_9;
		Else If(Global.array_loop == 2);
			Global.hit_2_16 = Global.hit_8;
			Global.miss_2_24 = Global.miss_9;
		Else If(Global.array_loop == 3);
			Global.hit_3_17 = Global.hit_8;
			Global.miss_3_25 = Global.miss_9;
		Else If(Global.array_loop == 4);
			Global.hit_4_18 = Global.hit_8;
			Global.miss_4_26 = Global.miss_9;
		Else If(Global.array_loop == 5);
			Global.hit_5_19 = Global.hit_8;
			Global.miss_5_27 = Global.miss_9;
		Else If(Global.array_loop == 6);
			Global.hit_6_20 = Global.hit_8;
			Global.miss_6_28 = Global.miss_9;
		Else If(Global.array_loop == 7);
			Global.hit_7_21 = Global.hit_8;
			Global.miss_7_29 = Global.miss_9;
		Else;
			Enable Inspector Recording;
			Disable Inspector Recording;
			Global.hit_8 = Empty Array;
			Global.miss_9 = Empty Array;
		End;
	}
}

rule("sub hybrid")
{
	event
	{
		Subroutine;
		hybrid;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Set Match Time(0);
		Wait(1, Ignore Condition);
		Set Match Time(0);
		Wait(1, Ignore Condition);
		Set Match Time(0);
		disabled Global.bap_pos = Vector(3.335, 2, 68.113);
		Global.bap_pos = Objective Position(Objective Index);
		Create Dummy Bot(Global._hero, Team 1, 0, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 2, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 3, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 4, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 5, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 6, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 7, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 8, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 9, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 10, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 11, Vector(0, 0, 0), Vector(0, 0, 0));
	}
}

rule("sub cp")
{
	event
	{
		Subroutine;
		cp;
	}

	actions
	{
		Wait(1, Ignore Condition);
		Set Match Time(0);
		Wait(1, Ignore Condition);
		Set Match Time(0);
		Wait(1, Ignore Condition);
		Set Match Time(0);
		disabled Global.bap_pos = Vector(3.335, 2, 68.113);
		Global.bap_pos = Objective Position(Objective Index);
		If(Global.cp_mode == 0);
			Create Dummy Bot(Global._hero, Team 1, 0, Vector(0, 0, 0), Vector(0, 0, 0));
			Create Dummy Bot(Global._hero, Team 1, 1, Vector(0, 0, 0), Vector(0, 0, 0));
			Create Dummy Bot(Global._hero, Team 1, 2, Vector(0, 0, 0), Vector(0, 0, 0));
			Create Dummy Bot(Global._hero, Team 1, 3, Vector(0, 0, 0), Vector(0, 0, 0));
			Create Dummy Bot(Global._hero, Team 1, 4, Vector(0, 0, 0), Vector(0, 0, 0));
			Create Dummy Bot(Global._hero, Team 1, 5, Vector(0, 0, 0), Vector(0, 0, 0));
			Create Dummy Bot(Global._hero, Team 1, 6, Vector(0, 0, 0), Vector(0, 0, 0));
			Create Dummy Bot(Global._hero, Team 1, 7, Vector(0, 0, 0), Vector(0, 0, 0));
			Create Dummy Bot(Global._hero, Team 1, 8, Vector(0, 0, 0), Vector(0, 0, 0));
			Create Dummy Bot(Global._hero, Team 1, 9, Vector(0, 0, 0), Vector(0, 0, 0));
			Create Dummy Bot(Global._hero, Team 1, 10, Vector(0, 0, 0), Vector(0, 0, 0));
			Create Dummy Bot(Global._hero, Team 1, 11, Vector(0, 0, 0), Vector(0, 0, 0));
		End;
		Create Dummy Bot(Global._hero, Team 2, 0, Vector(0, 0, 0), Vector(0, 0, 0));
	}
}

rule("2cp point B")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		Current Game Mode == Game Mode(Assault);
		Global.cp_mode == 1;
		Global.cp_mode == Objective Index;
	}

	actions
	{
		Destroy All Dummy Bots;
		Wait(1, Ignore Condition);
		Global.bap_pos = Objective Position(Objective Index);
		Create Dummy Bot(Global._hero, Team 1, 0, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 2, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 3, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 4, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 5, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 6, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 7, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 8, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 9, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 1, 10, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Global._hero, Team 2, 0, Vector(0, 0, 0), Vector(0, 0, 0));
	}
}