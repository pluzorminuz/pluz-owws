settings
{
	modes
	{
		disabled Assault
		{
			Game Mode Start: Manual
			Hero Limit: Off
		}

		disabled Control
		{
			Game Mode Start: Manual
			Hero Limit: Off
		}

		disabled Escort
		{
			Game Mode Start: Manual
			Hero Limit: Off
		}

		disabled Hybrid
		{
			Game Mode Start: Manual
			Hero Limit: Off
		}

		disabled Practice Range
		{
			Game Mode Start: Manual
			Hero Limit: Off
			Training Partner: Off
		}

		Skirmish
		{
			enabled maps
			{
				Workshop Chamber
			}
		}

		disabled Team Deathmatch
		{
			Game Mode Start: Manual
			Hero Limit: Off
		}
	}

	heroes
	{
		General
		{
			Ability Cooldown Time: 0%
			No Ammunition Requirement: On
		}
	}
}

rule("player_init_once")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) != True;
	}

	actions
	{
		Set Gravity(Event Player, 0);
		Set Projectile Gravity(Event Player, 0);
		Add Health Pool To Player(Event Player, Shields, 9000, True, True);
		Start Camera(Event Player, Eye Position(Event Player) + Vector(0, 0, -2), Eye Position(Event Player), 0);
		Create Effect(All Players(All Teams), Sphere, Color(White), Eye Position(Event Player), 0.100, Visible To Position and Radius);
		Set Invisible(Event Player, All);
		Start Heal Over Time(Event Player, Event Player, 9999, 500);
		Create HUD Text(All Players(All Teams), Custom String("Eye Position: {0}", 100000 * Eye Position(Event Player)), Null, Null, Left,
			1, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Distance to Wall (x100000): {0}", 100000 * (X Component Of(Eye Position(
			Event Player)) - X Component Of(Evaluate Once(Ray Cast Hit Position(Vector(30, 20, 0), Vector(0, 20, 0), Null, Event Player,
			False))))), Null, Null, Left, 0, Color(Yellow), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Distance to Wall (x1): {0}", 1 * (X Component Of(Eye Position(Event Player))
			- X Component Of(Evaluate Once(Ray Cast Hit Position(Vector(30, 20, 0), Vector(0, 20, 0), Null, Event Player, False))))), Null,
			Null, Left, 1, Color(Green), Color(White), Color(White), Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Distance to Wall 21.25 (x100000): {0}", 100000 * (X Component Of(
			Eye Position(Event Player)) - X Component Of(Evaluate Once(Ray Cast Hit Position(Vector(30, -0.700, 0), Vector(0, -0.700, 0),
			Null, Event Player, False))))), Null, Null, Left, 2, Color(Yellow), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("Distance to Wall 21.25 (x1): {0}", 1 * (X Component Of(Eye Position(
			Event Player)) - X Component Of(Evaluate Once(Ray Cast Hit Position(Vector(30, -0.700, 0), Vector(0, -0.700, 0), Null,
			Event Player, False))))), Null, Null, Left, 3, Color(Green), Color(White), Color(White), Visible To and String,
			Default Visibility);
		Create HUD Text(All Players(All Teams), Custom String("ray cast pos {0}", Ray Cast Hit Position(Eye Position(Event Player),
			Eye Position(Event Player) + 100 * Facing Direction Of(Event Player), All Players(All Teams), Event Player, True)), Null, Null,
			Right, 0, Color(White), Color(White), Color(White), Visible To and String, Default Visibility);
	}
}

rule("player_reset")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
	}

	actions
	{
		"wrecking ball"
		disabled Teleport(Event Player, Vector(21, -5, 0));
		Teleport(Event Player, Vector(21, 20, -24));
		Set Move Speed(Event Player, 0);
		Start Facing(Event Player, Vector(0, 0, 1), 10000, To World, Direction and Turn Rate);
	}
}

rule("give ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Ultimate Charge Percent(Event Player) != 100;
		Is Dummy Bot(Event Player) != True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("teleport_right")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Right;
	}

	actions
	{
		Teleport(Event Player, Position Of(Event Player) + 0.001 * Right);
		Wait(0.250, Abort When False);
		While(True);
			Teleport(Event Player, Position Of(Event Player) + 0.001 * Right);
			Wait(0.016, Abort When False);
		End;
	}
}

rule("teleport_left")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Throttle Of(Event Player) == Left;
	}

	actions
	{
		Teleport(Event Player, Position Of(Event Player) + 0.001 * Left);
		Wait(0.250, Abort When False);
		While(True);
			Teleport(Event Player, Position Of(Event Player) + 0.001 * Left);
			Wait(0.016, Abort When False);
		End;
	}
}

rule("no knockback collision")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Set Knockback Received(Event Player, 0);
		Set Knockback Dealt(Event Player, 0);
		Disable Movement Collision With Players(Event Player);
	}
}

rule("change hero")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Communicating(Event Player, Acknowledge) == True;
	}

	actions
	{
		Set Player Allowed Heroes(Event Player, Filtered Array(All Heroes, Current Array Element != Hero Of(Event Player)));
		Set Player Allowed Heroes(Event Player, All Heroes);
	}
}