settings
{
	lobby
	{
		Max Team 1 Players: 1
		Max Team 2 Players: 1
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Rialto
			}
		}

		General
		{
			Respawn Time Scalar: 0%
		}
	}

	heroes
	{
		General
		{
			Tracer
			{
				Blink Cooldown Time: 0%
			}

			enabled heroes
			{
				Tracer
			}
		}
	}

	extensions
	{
		Spawn More Dummy Bots
	}
}

variables
{
	player:
		1: jumper
}

rule("Rule 1")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.A = Array(Vector(0, 0, 1), Vector(1, 0, 1), Vector(1, 0, 0), Vector(1, 0, -1), Vector(0, 0, -1), Vector(-1, 0, -1), Vector(
			-1, 0, 0), Vector(-1, 0, 1));
		Global.D = Up * (9804.688 / 10000);
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Tracer), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
	}
}

rule("Rule 2")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		Set Move Speed(Event Player, 0);
		Start Throttle In Direction(Event Player, Global.A[(Slot Of(Event Player) - 1) % 8], 1, To Player, Replace existing throttle,
			None);
		Disable Movement Collision With Players(Event Player);
		If(Slot Of(Event Player) > 8);
			Event Player.jumper = True;
			Set Gravity(Event Player, 0);
		End;
	}
}

rule("Rule 3")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Dummy Bot(Event Player) == True;
	}

	actions
	{
		If(Event Player.jumper);
			Teleport(Event Player, Global.D + Position Of(Players In Slot(0, Team Of(Event Player))));
		Else;
			Teleport(Event Player, Position Of(Players In Slot(0, Team Of(Event Player))));
		End;
		Set Facing(Event Player, Facing Direction Of(Players In Slot(0, Team Of(Event Player))), To World);
		Wait(0.016, Ignore Condition);
		Press Button(Event Player, Button(Ability 1));
		Wait(0.250, Ignore Condition);
		Loop;
	}
}

rule("Rule 4")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Dummy Bot(Event Player) != True;
	}

	actions
	{
		Global.B = Y Component Of(Position Of(Event Player));
		If(Global.B > Global.C);
			Global.C = Global.B;
		End;
		Wait(0.016, Ignore Condition);
		Loop;
	}
}

rule("Rule 5")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create HUD Text(All Players(All Teams), Position Of(Local Player), Null, Null, Left, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create HUD Text(All Players(All Teams), 100000 * Global.C, Null, Null, Left, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
	}
}