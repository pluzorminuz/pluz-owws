settings
{
	lobby
	{
		Max Team 1 Players: 0
		Max Team 2 Players: 0
	}

	modes
	{
		Skirmish
		{
			enabled maps
			{
				Workshop Chamber
			}
		}

		General
		{
			Respawn Time Scalar: 0%
		}
	}

	heroes
	{
		General
		{
			No Ammunition Requirement: On
		}
	}

	extensions
	{
		Spawn More Dummy Bots
	}
}

rule("init")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Create Dummy Bot(Hero(Wrecking Ball), Team 2, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		disabled Create HUD Text(All Players(All Teams), 1000000 * Local Player.A, Null, Null, Left, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		disabled Create HUD Text(All Players(All Teams), Local Player.B, Null, Null, Right, 0, Color(White), Color(White), Color(White),
			Visible To and String, Default Visibility);
		Create Dummy Bot(Hero(Doomfist), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
		Create Dummy Bot(Hero(Doomfist), Team 1, -1, Vector(0, 0, 0), Vector(0, 0, 0));
	}
}

rule("detector_init")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Team Of(Event Player) == Team 2;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Disable Movement Collision With Environment(Event Player, True);
		Disable Movement Collision With Players(Event Player);
		Set Max Health(Event Player, 1000);
		Set Gravity(Event Player, 0);
		Start Scaling Player(Event Player, 20, False);
		Start Forcing Player Position(Event Player, Vector(-13, -4, 8), False);
		Start Heal Over Time(Event Player, Event Player, 9999, 9999);
		Wait(2, Ignore Condition);
		Press Button(Event Player, Button(Ability 1));
	}
}

rule("dealt_dmg")
{
	event
	{
		Player Dealt Damage;
		All;
		All;
	}

	actions
	{
		disabled Event Player.A = Event Direction;
		Log To Inspector(Custom String("{0}", 1000000 * Event Direction));
		disabled Event Player.B += 1;
	}
}

rule("refill_ult")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Is Button Held(Event Player, Button(Ultimate)) == True;
	}

	actions
	{
		Set Ultimate Charge(Event Player, 100);
	}
}

rule("dealer_init")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Team Of(Event Player) == Team 1;
		Has Spawned(Event Player) == True;
	}

	actions
	{
		Disable Movement Collision With Players(Event Player);
		Start Forcing Player Position(Event Player, Vector(0, 0, 0), False);
		Start Facing(Event Player, Vector(-1, 0, 0), 1000, To World, Direction and Turn Rate);
		Set Projectile Speed(Event Player, 1);
		Wait(2, Ignore Condition);
		Start Holding Button(Event Player, Button(Primary Fire));
	}
}